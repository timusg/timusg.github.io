<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Sumit Gupta's Blog]]></title>
  <link href="http://timusg.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://timusg.github.io/"/>
  <updated>2013-12-09T23:22:06+05:30</updated>
  <id>http://timusg.github.io/</id>
  <author>
    <name><![CDATA[timusg]]></name>
    <email><![CDATA[timusga@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[code test and automate infrastructure - part II]]></title>
    <link href="http://timusg.github.io/blog/2013/12/09/code-test-and-automate-infrastructure-part-ii/"/>
    <updated>2013-12-09T18:54:00+05:30</updated>
    <id>http://timusg.github.io/blog/2013/12/09/code-test-and-automate-infrastructure-part-ii</id>
    <content type="html"><![CDATA[<h2>Part Two  - Testing</h2>

<p>Good code evolve with tests and CI is vital part of development cycle specially if multiple developers are working on the same code base,
these development practices also worth when applied to the infrastructure code.</p>

<p>One compelling reason for not doing so is that as compared to application code, infrastructure code is more resilient and not frequently changes. But still automated tests not only ensure sanity of code but often fasten development speed by reducing lot
of time required for manual testing of changes.</p>

<!--more-->


<h3>Codebase changes for testing</h3>

<p>As mentioned in <a href="/blog/2013/11/07/code-test-and-automate-infrastructure/">first part</a> one repo per cookbook for
modularity also simplify the independent testing of the cookbook,
but don't worry if you have legacy codebase, there are also tools like <a href="https://github.com/customink/strainer">strainer</a> which simplify testing of monolithic chef repo.</p>

<h3>Cookbook build pipeline</h3>

<p>Cookbook testing pipeline in CI can be like</p>

<p><center><img src='/images/plantuml/ac9c62cd2f97416ce48835bc9f070fdf.png'></center></p>

<h5>Lint</h5>

<p>rubocop is ruby static code analyzer and foodcritic is lint tool, they mainly target the code conventions,
foodcritic also check some coding error like invalid resource actions.</p>

<h5>Unit Tests:</h5>

<p>chef spec is unit testing framework which is based upon rspec of ruby land and is pseudo convergence
framework means it run cookbook locally without  without actually converging a node, the benefit it provide is fast feedback and good for testing template and configuration
files, permissions etc... , other tools like searchef and chef-zero
plays well with it.</p>

<h4>Integration Tests:</h4>

<p>Test kitchen is post convergence framework and it spawn a machine for running integration tests in isolated environment.
it support various test backend like bats and server spec, test kitchen tests are slower than unit tests test but it test actual system convergence and ensure that target system is configured properly, ideal for testing cookbooks in different distros.</p>

<p>test kitchen with vagrant based approach is slow and you can use
<a href="/blog/2013/10/15/testing-cookbook-with-docker-and-test-kitchen/">container based approach</a> for faster feedback.</p>

<h4>Cookbook for setting up CI server</h4>

<p>we have integrated docker in our CI server and are using test kitchen with docker plugin for running integration tests.
here is a <a href="https://github.com/codeignition/cookbook-pipeline">cookbook</a> which can set up Jenkins, Docker and required packages and create builds jobs from attributes.</p>

<h2>Follow Up</h2>

<p>Once automated test suits and CI server in place, then it open the
further doors for automating other knife related tasks for uploading
cookbook and bumping environments, the next article will cover
further automation in detail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing chef cookbook with docker and test kitchen]]></title>
    <link href="http://timusg.github.io/blog/2013/10/15/testing-cookbook-with-docker-and-test-kitchen/"/>
    <updated>2013-10-15T17:44:00+05:30</updated>
    <id>http://timusg.github.io/blog/2013/10/15/testing-cookbook-with-docker-and-test-kitchen</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/opscode/test-kitchen">Test Kitchen</a> is a framework for isolated integration testing of chef
recipes</p>

<p>For testing a recipe it spawn a vm, execute tests and then destroys it.
For local cookbook development and manual testing of changes
<a href="http://www.vagrantup.com/">vagarnt</a> is definitely the best choice,
but for developing cookbook with automated tests suits faster test feedback is really important, since VM based approach is very
slow and it is worth to try containers for cookbook testing.</p>

<!--more-->


<h2>Optimisation with containers</h2>

<p>Containers like openvz and lxc are faster to launch and are very lightweight as compared to virtual box and other VM based backends.</p>

<p>As compared to openvz, lxc is available on the mainstream linux kernel but managing lxc container with scripts
is not an easy task, there are two lxc baced framework available, <a href="https://github.com/fgrehm/vagrant-lxc">vagrant lxc</a>(vagrant lxc provider) and <a href="https://www.docker.io/">docker</a> (package and run application as container) which provides
good abstraction layer over lxc.</p>

<p>Test kitchen has a architecture for pluggable virtualization backend and it support vagrant, ec2 and recently
with <a href="https://github.com/portertech/kitchen-docker">kitchen-docker</a> plugin, docker can also used as driver.</p>

<p>I am using following setup to use test kitchen with docker.</p>

<h2>Setup</h2>

<h3>Install docker</h3>

<p><a href="https://www.docker.io/gettingstarted/">Install</a> it for supported
platform or
Install it with community cookbook with chef and berkself</p>

<p><code>ruby Berksfile to install docker
site :opscode
metadata
group :integration do
cookbook 'docker'
end
</code></p>

<h3>Install test-kitchen and docker driver</h3>

<p>Can be installed with bundler by using following Gemfile file</p>

<p>``` ruby Gemfile
source 'https://rubygems.org'</p>

<p>gem 'berkshelf', '~> 2.0'</p>

<p>group :integration do
  gem 'test-kitchen', '~> 1.0.0.beta'
  gem 'kitchen-docker'
end
```</p>

<h3>Sample Cookbook</h3>

<p>Download <a href="https://github.com/opscode-cookbooks/ntp.git">ntp</a> cookbook for testing, beacuse it also serve as a testing documentation reference</p>

<h2>Execute Tests</h2>

<p>Change .kitchen.yml file of ntp cookbook to use kitchen docker plugin</p>

<h2>``` yml example .kitchen.yml</h2>

<p>driver_plugin: docker
driver_config:
  require_chef_omnibus: true</p>

<p>platforms:
- name: centos
  driver_config:</p>

<pre><code>image: "centos"
platform: "rhel"
</code></pre>

<p>  run_list:
  - recipe[yum]</p>

<p>suites:
  - name: default</p>

<pre><code>run_list:
  - recipe[ntp::default]
attributes:
  ntp:
    sync_clock: true
    sync_hw_clock: true
</code></pre>

<ul>
<li>name: undo
run_list:

<ul>
<li>recipe[ntp::undo]
```</li>
</ul>
</li>
</ul>


<p>And run kitchen to execute tests in docker container</p>

<p><code>ruby
bundle exec kitchen test
</code></p>

<h2>More optimisations</h2>

<p>Test Kitchen downloads chef omnibus package every time while spawning
a container, this step takes both time and bandwidth, this can be turned
off by setting require_chef_omnibus flag to false, following are other options to optimize this</p>

<ul>
<li>use local repository for chef omnibus and override chef_omnibus_url flag</li>
<li>use lightweight gem like chef zero</li>
<li>utilize docker cache with  provision_command command</li>
<li>build new image with installed chef for testing</li>
</ul>


<p>New image can be easily created by using following
commands</p>

<p>``` sh
cat &lt;&lt; 'EOF' > Dockerfile
FROM centos
RUN curl -L https://www.opscode.com/chef/install.sh | sudo bash</p>

<p>RUN #install additopnal packages</p>

<p>EOF
docker build -t  image_name .
```</p>

<p>Set image key to image_name in .kitchen.yml
file and execute tests more faster.</p>
]]></content>
  </entry>
  
</feed>
