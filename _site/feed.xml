<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Timusg&#39;s blog</title>
    <description>Code Automate Scale
</description>
    <link>http://www.timusg.com//</link>
    <atom:link href="http://www.timusg.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 14 Oct 2015 09:30:03 +0530</pubDate>
    <lastBuildDate>Wed, 14 Oct 2015 09:30:03 +0530</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Monitor the Business, not just the Infrastructure</title>
        <description>&lt;p&gt;Infrastructure monitoring is an important aspect of DevOps culture. Whether it’s a simple check &amp;amp; email alert, or an elaborate network of tools that automatically monitor, analyze, visualize &amp;amp; send alerts across platforms; infrastructure monitoring helps DevOps teams identify resource contentions, critical service failures and generally gain insights that help the DevOps workflows.&lt;/p&gt;

&lt;p&gt;As compelling as infrastructure monitoring is, it can be insufficient in telling the whole story of the business. And if the role of DevOps is to enable, drive and grow the business, then it’s imperative to set up business monitoring first. It’s not just better for business, it’s also better for DevOps. Here’s why.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoid Ad Hoc Post-mortem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine there’s an infrastructure you manage which is running smoothly. There are no memory or disc alerts, no latency issues, nothing that alerts you about anything amiss. Then you hear from the business team that daily order or revenue numbers have been dropping, and now you have an investigation on your hands. &lt;/p&gt;

&lt;p&gt;Is it a deployment issue? Third-party services latency? Or is it simply user behavior? Recently on a project the client shared an observation that on one day of the week around the same time they always reported drops in revenue. What followed was a root cause analysis of everything, till we discovered that a lot of the service providers (it’s a business that connects them with customers) would be unavailable at that time due to Friday prayers. &lt;/p&gt;

&lt;p&gt;Having a business monitoring setup would help identify trends, correlations and causes like these a lot sooner and save time &amp;amp; effort expended by business &amp;amp; DevOps teams alike.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manage Growth Better&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a business grows, so does its engineering. More traffic, more users, more end-points means building more subsystems to cater to product &amp;amp; service needs and to satisfy scalability requirements. More subsystems mean more moving parts and integration points, and more scope for impedance mismatches or failure points within the system.&lt;/p&gt;

&lt;p&gt;As with all polyglot trends, these subsystems are built with different tech stacks and come with different databases or messaging components. This means multiple different data points need to be collected and monitored in some way or the other for the business to run and scale smoothly. &lt;/p&gt;

&lt;p&gt;Here business monitoring helps in identification of not only the key metrics, but in their impact on services as well. In another recent example, we optimized a service for scale but it became too fast for the peer component to keep pace with it. The result was bottlenecks in other services and general slowdown.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proactive Assessment &amp;amp; Resolution&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A typical escalation scenario goes like this: some user (internal or external) encounters a tardy or even downright slow service, rings up the call centre or support team, who then bring that to the engineering team to find the root cause and resolve the issue. The engineering team digs through logs and places some form of monitoring or the other just in case this issue happens again. &lt;/p&gt;

&lt;p&gt;While this isn’t a no-no approach, the business impact resulting from any service downtime and poor customer experiences can be easily avoided by proactively monitoring the more high level metrics which reflect the problems in early stages. Infrastructure monitoring is still required for fixing issues from an engineering standpoint, but business monitoring helps in decreasing the feedback time and uncovering the services issue early on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sharper Alerts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Infrastructure monitoring for growing or big systems also suffers from a higher noise ratio, because of repeating alerts resulting from false alarms or non-urgent issues like CPU spikes in one of many nodes. Most of these are transient in nature which disappear fast, but the sheer frequency of these alerts and their amplification in different forms can lead to desensitization and ignorance, which can spell trouble.&lt;/p&gt;

&lt;p&gt;Business monitoring helps identify &amp;amp; prioritize critical events, paving the way for DevOps to define alerts better and stay sharp.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better Business, Better DevOps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A typical business metrics dashboard can be counters for DAU, MAU and time series or moving averages for concurrent orders or active users. Supplementing business metrics with key DevOps events like customer escalations or deployment events further helps in identifying &amp;amp; correlating trends and pin points issues proactively and early on.&lt;/p&gt;

&lt;p&gt;In summary, business monitoring helps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Identify trends &amp;amp; issues early to avoid unnecessary post-mortems&lt;/li&gt;
  &lt;li&gt;Correlate infrastructure and business metrics for faster and smarter impact analyses&lt;/li&gt;
  &lt;li&gt;Business teams to actively monitor metrics to notify you for anomalies or potential technical issues&lt;/li&gt;
  &lt;li&gt;Help in moving from reactive to proactive DevOps&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 17 Sep 2015 00:00:00 +0530</pubDate>
        <link>http://www.timusg.com//2015/09/17/monitor-the-business-not-just-the-infrastructure.html</link>
        <guid isPermaLink="true">http://www.timusg.com//2015/09/17/monitor-the-business-not-just-the-infrastructure.html</guid>
        
        <category>monitoring</category>
        
        <category>business metrics</category>
        
        <category>devops best practices</category>
        
        <category>infrastructure</category>
        
        <category>dashboards</category>
        
        <category>computing resources</category>
        
        <category>trend analysis</category>
        
        <category>proactive devops</category>
        
        
      </item>
    
      <item>
        <title>Centralized Logging in Distributed Systems using ELK</title>
        <description>&lt;p&gt;An integral part of any system, logging maintains live records of everything that happens in that system. Logging is helpful in solving often mission critical issues like identifying performance bottlenecks, detecting intrusions or threats, analyzing &amp;amp; identifying trends or patterns, and doing a thorough audit whenever the need arises.&lt;/p&gt;

&lt;p&gt;But despite its clearly important role, many logging mechanisms are riddled with problems. We won’t go into why they arise, but rather touch on what they are, and how implementing centralized logging solves these problems. &lt;/p&gt;

&lt;h3 id=&quot;problems-with-logs&quot;&gt;Problems with Logs&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Plain Text Format&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many systems write logs in flat files and the format is often in plain text. This is an obvious no-no, as the plain text log format limits the log’s usage to do grep and search for events, and also require custom scripts to do some sort of reporting or aggregation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different Forms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typical systems today consist of many moving parts which generate logs in their own format and in their own files. So when you have to identify root cause of a problem the system is facing or any kind of investigation, your job is more difficult since you have to refer to multiple log files of different forms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scattered&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recently we have seen a rising trend of micro services based architectures &amp;amp; distributed systems. Any medium sized system following this trend consists of many layers like load balancers, proxies, app/web server and databases. Every layer has different logging patterns, different log files and also different nodes. 
All these problems make it very difficult to tail or grep the logs in an individual machine, and make centralized logging all the more necessary.&lt;/p&gt;

&lt;h3 id=&quot;centralized-logging-solves-these-problems&quot;&gt;Centralized Logging solves these problems&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Single Location&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Centralized logging stores all the logs generated by all the different layers in a single location, making search or processing fast and easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Processing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also process &amp;amp; parse the logs to the key value pair of format &amp;amp; tags.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Format: Parse the plain text to structured data like JSON and extract the keys for the application environment, IP, host or time&lt;/li&gt;
  &lt;li&gt;Tagging: Tag the logs to make it easy to search, identify and correlate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Store the generated &amp;amp; processed logs in your storage system optimized for search or data analytics like HDFS or Elastic search.&lt;/p&gt;

&lt;h3 id=&quot;stack-configuration&quot;&gt;Stack Configuration&lt;/h3&gt;

&lt;p&gt;There are many Open Source or Paid SaaS tools which help you configure, deploy &amp;amp; manage centralized logging, but our recommended stack is ELK.&lt;/p&gt;

&lt;p&gt;The ELK stack consists of 3 main systems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Logstash&lt;/strong&gt; is the router for logs which runs key structuring processes like grok and conversion of the logs to JSON&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Elastic Search&lt;/strong&gt; fulfils all your search requirements, especially if you want to be thorough&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kibana&lt;/strong&gt; makes managing the centralized logging system easy by letting you build interfaces for search, analytics &amp;amp; other dashboards&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally there are Chef cookbooks, Puppet modules, Ansible playbooks &amp;amp; Docker images that will help you set up the ELK stack in your infrastructure.&lt;/p&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;p&gt;Check out these links to learn more about Centralized Logging with ELK &amp;amp; how to get started.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kurtado/elk-puppet&quot;&gt;https://github.com/kurtado/elk-puppet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bakhti/ansible-elk&quot;&gt;https://github.com/bakhti/ansible-elk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rackspace-cookbooks/elkstack&quot;&gt;https://github.com/rackspace-cookbooks/elkstack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/willdurand/docker-elk&quot;&gt;https://github.com/willdurand/docker-elk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 04 Jun 2015 00:00:00 +0530</pubDate>
        <link>http://www.timusg.com//2015/06/04/centralized-logging.html</link>
        <guid isPermaLink="true">http://www.timusg.com//2015/06/04/centralized-logging.html</guid>
        
        <category>loggings</category>
        
        <category>server logs</category>
        
        <category>saas</category>
        
        <category>open source</category>
        
        <category>elastic search</category>
        
        <category>logstash </category>
        
        <category>kibana </category>
        
        <category>chef </category>
        
        <category>puppet </category>
        
        <category>ansible</category>
        
        <category>docker</category>
        
        <category>big data</category>
        
        <category>real time analytics</category>
        
        <category>intrusion detection</category>
        
        
      </item>
    
      <item>
        <title>Code test and automate infrastructure - part II</title>
        <description>&lt;p&gt;Code should evolve with tests and CI is vital part of it specially multiple developers working in same code base.&lt;/p&gt;

&lt;p&gt;As in the first part I mentioned to use one repo for each project, we can use execute tests in ci for every commit and
generate artifacts which are cookbook and environment.&lt;/p&gt;

&lt;p&gt;Recent version of chef spec is really good for unit tests and test
kitchen is for running integration tests in isolated environment.&lt;/p&gt;

&lt;p&gt;Community ntp cookbook is great starting point for writing tested cookbooks&lt;/p&gt;

&lt;p&gt;pipeline for an application cookbook is as follow&lt;/p&gt;

&lt;p&gt;in short testing part is covered by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unit tests with chef spec&lt;/li&gt;
  &lt;li&gt;rubocop , foodcritics for lint&lt;/li&gt;
  &lt;li&gt;integartion tests with test kitchen and bats&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;so each commit in application cookbook trigger bulid pipeline and
execute stages in order.&lt;/p&gt;

&lt;p&gt;we have inregarated docker in ci serevr and using  test kitchen with docker plugin for running integtarion tests.&lt;/p&gt;

&lt;p&gt;vagrant lxc , intgratio tests
test kitchen , spec
chef zero&lt;/p&gt;

&lt;p&gt;using application cook book for each project&lt;/p&gt;

&lt;p&gt;final outcome:
 artifacts
 cookbook , environment&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Oct 2013 18:54:00 +0530</pubDate>
        <link>http://www.timusg.com//blog/2013/12/09/code-test-and-automate-infrastructure-part-ii/</link>
        <guid isPermaLink="true">http://www.timusg.com//blog/2013/12/09/code-test-and-automate-infrastructure-part-ii/</guid>
        
        
      </item>
    
      <item>
        <title>Testing chef cookbook with docker and test kitchen</title>
        <description>&lt;p&gt;Test Kitchen is a framework for isolated integration testing of chef
recipes.&lt;/p&gt;

&lt;p&gt;For testing a recipe it spawn a vm, execute tests and then destroys it.
For local cookbook development and manual testing of changes
&lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;vagarnt&lt;/a&gt; is definitely the first choice,
but for developing cookbook with automated tests suits this VM based approach is very
slow and as test kitchen destroys box with each run, testing feedback time become really important factor in development speed and is worthy candidate for
optimisation.&lt;/p&gt;

&lt;h2 id=&quot;optimisation&quot;&gt;Optimisation&lt;/h2&gt;
&lt;p&gt;Containers like openvz and lxc are faster to launch and are very lightweight as compared to virtual box and other VM based backends.&lt;/p&gt;

&lt;p&gt;As compared to open vz, lxc is available on the mainstream linux kernel but managing lxc container with scripts
is not an easy task, there are two lxc baced framework available, &lt;a href=&quot;https://github.com/fgrehm/vagrant-lxc&quot;&gt;vagrant lxc&lt;/a&gt;(vagrant lxc provider) and &lt;a href=&quot;https://www.docker.io/&quot;&gt;docker&lt;/a&gt; (package and run application as container) which provides
good abstraction layer over lxc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/opscode/test-kitchen&quot;&gt;Test Kitchen&lt;/a&gt; has a architecture for pluggable virualization backend and it support vagrant, ec2 and recently
with &lt;a href=&quot;https://github.com/portertech/kitchen-docker&quot;&gt;kitchen-docker&lt;/a&gt; plugin, docker can also used as driver.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I am using following setup to use test kitchen with docker.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;h3 id=&quot;install-docker&quot;&gt;Install docker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.docker.io/gettingstarted/&quot;&gt;Install&lt;/a&gt; it for supported
platform or
Install it with community cookbook with chef and berkself&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#Berksfile to install docker&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:opscode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:integration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;docker&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-test-kitchen-and-docker-driver&quot;&gt;Install test-kitchen and docker driver&lt;/h3&gt;

&lt;p&gt;Can be installed with bundler by using following Gemfile file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://rubygems.org&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;berkshelf&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;~&amp;gt; 2.0&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:integration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;test-kitchen&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;~&amp;gt; 1.0.0.beta&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;kitchen-docker&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-cookbook&quot;&gt;Test Cookbook&lt;/h3&gt;

&lt;p&gt;Download &lt;a href=&quot;https://github.com/opscode-cookbooks/ntp.git&quot;&gt;ntp&lt;/a&gt; cookbook for testing, beacuse it also serve as a testing documentation reference&lt;/p&gt;

&lt;h2 id=&quot;execute-tests&quot;&gt;Execute Tests&lt;/h2&gt;

&lt;p&gt;Change .kitchen.yml file of ntp cookbook to use kitchen docker plugin&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;driver_plugin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;driver_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;require_chef_omnibus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;platforms&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;centos&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;driver_config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;centos&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rhel&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;recipe[yum]&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;suites&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;recipe[ntp::default]&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;ntp&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;sync_clock&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;sync_hw_clock&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;undo&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;recipe[ntp::undo]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And run kitchen to execute tests in docker container&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;bundle exec kitchen test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;more-optimisations&quot;&gt;More optimisations&lt;/h2&gt;

&lt;p&gt;Test Kitchen downloads chef omnibus package every time while spawning
a container, this step takes both time and bandwidth, this behaviour can
be override by setting require_chef_omnibus flag, there are also few tricks to speed up this step.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use local repository for chef omnibus and override chef_omnibus_url flag&lt;/li&gt;
  &lt;li&gt;use lightweight gem like chef zero&lt;/li&gt;
  &lt;li&gt;utilize docker cache with  provision_command command&lt;/li&gt;
  &lt;li&gt;package omnibus with container and build image for testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New image can be easily created by using following
docker file &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cat &lt;span class=&quot;sh&quot;&gt;&amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; Dockerfile
FROM centos
RUN curl -L https://www.opscode.com/chef/install.sh | sudo bash
EOF
&lt;/span&gt;docker build -t  image_name .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Set and image: image_name in .kitchen.yml
file and execute tests more faster.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Oct 2013 17:44:00 +0530</pubDate>
        <link>http://www.timusg.com//blog/2013/10/15/testing-cookbook-with-docker-and-test-kitchen/</link>
        <guid isPermaLink="true">http://www.timusg.com//blog/2013/10/15/testing-cookbook-with-docker-and-test-kitchen/</guid>
        
        
        <category>devops</category>
        
        <category>tdd</category>
        
      </item>
    
      <item>
        <title>Code test and automate infrastructure</title>
        <description>&lt;p&gt;Infrastructure as code is mantra these days and is often japas by using various frameworks like chef puppet and ansible etc…
this area {“ cross cuts between developers and ops domains”}, and still the patterns for infrastructure code are still evolving.&lt;/p&gt;

&lt;p&gt;This post is about using chef and apply best practices for code test and automate our and our clients infrastructure.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;part-one---the-code&quot;&gt;Part One - The Code&lt;/h2&gt;

&lt;p&gt;Code should be extensible, maintainable , reusable and in short modular but keeping all chef code in single repository have some issues and it
also make code reuse difficult.&lt;/p&gt;

&lt;h2 id=&quot;problems&quot;&gt;Problems:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;code and data is in same place , but they often evolves with different pace&lt;/li&gt;
  &lt;li&gt;cookbooks in one big repository are difficult to develop and test independently&lt;/li&gt;
  &lt;li&gt;cookbooks in same repository are not modular and difficult to
distribute and reuse.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;To solve these problem there are some frameworks, we use berkself.
it allows to use and distributes cookbooks similar to gems.
it is not only nicely written but is a foundation of software principals, There are numerous articles on this and we are also using berkself&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We take care of following points while developing chef code.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use community cookbooks and write wrapper cookbook for extension if
required&lt;/li&gt;
  &lt;li&gt;use no role, roles are like global variables, also if required write aggregated recipes&lt;/li&gt;
  &lt;li&gt;use convention over configuration with proper naming convention , use search and sane defaults&lt;/li&gt;
  &lt;li&gt;create application cookbook with git repo for itself for each project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;following are the patterns , which i regularly encounter while writing chef code.&lt;/p&gt;

&lt;h2 id=&quot;patterns&quot;&gt;Patterns&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Aggregated Recipe &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are equivalent to aggregation, and only includes other recipes.
for example default recipes can contain app and db recipes and then can
be used for setting dev testing box.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#application cookbook: default.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;app&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;db&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Wrapper Recipe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this is like decorator and can be used for extending community cookbook.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# foo.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;foo&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;configuration for foo&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Private Recipe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this is like abstract class and contains code shared by recipes which are exposed to public,
 generally it’s name is prefixed with _ , it can also replaced by extracting common
 code in lwrp or definitions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application cook book&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this is actual cookbook for project , I prefer to create one cook for
each micro rest component and different recipes in it for infrastructure needs. &lt;/p&gt;

&lt;p&gt;this contain application specific configuration code and often use
abstracted code from library cookbook’s lwrps and definition.&lt;/p&gt;

&lt;p&gt;recipes are created for each component like db , app , cache , proxy , elb so on&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#application cookbook dir structure&lt;/span&gt;
.
|-- Berksfile
|-- Vagrantfile
|-- attributes
|   |-- app.rb
|   &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-- db.rb
|-- metadata.rb
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-- recipes
    |-- app.rb
    |-- db.rb
    &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-- redis.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;though micro service tempt to reuse , one project ,using tag , what this often leads to conditional code in end&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Library Cookbook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this is brain and heart of chef code base , contain all common code for
application cookbooks.
library cookbook contain no recipe, it abstract common code for reusing in application cook books in form of lwrps and definitions
for example set up app servers (puma/nginx combo , torquebox ), app rpm/omnibus installers&lt;/p&gt;

&lt;p&gt;it can be combined with base cookbook also.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Base Cookbook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It replaces the base role and install basic packages like vim , tmux/screen , yum repos , environment specific tools like debug, tracing tools, monitoring clients etc . the benefit over role is that you can version it and also different recipes for environment provides more flexibility.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;.
|-- Berksfile
|-- Vagrantfile
|-- attributes
|   |-- stagging.rb
|   &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-- production.rb
|-- metadata.rb
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-- recipes
    |-- _common.rb
    |-- stagging.rb
    &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-- production.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Infrastructure Cookbook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this contain wrapper recipes/scripts for common infrastructure tools chef server, bind , openvpn , ganglia server and ci and often use wrapper recipes over community cookbooks. &lt;/p&gt;

&lt;p&gt;this provide two benefits
1) one place for all common infrastructure code.
2) own name space which is useful for searching and setting fqdn etc in
application cookbooks.&lt;/p&gt;

&lt;p&gt;Part two is about testing cookbook and setting up CI and build
pipelines.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Oct 2013 16:36:00 +0530</pubDate>
        <link>http://www.timusg.com//blog/2013/11/07/code-test-and-automate-infrastructure/</link>
        <guid isPermaLink="true">http://www.timusg.com//blog/2013/11/07/code-test-and-automate-infrastructure/</guid>
        
        
      </item>
    
      <item>
        <title>Hoppr Platform in Last 10 Months</title>
        <description>&lt;p&gt;with 7.6 m users hoppr platform is now handling around 600k checkins and 3m+ events per day.&lt;/p&gt;

&lt;p&gt;underline is a heavily distributed architecture spread across three data centers and aws vpc.
it support zero downtime deployment and minimalistic service availability even in case of wan link failure.&lt;/p&gt;

&lt;h2 id=&quot;tech-stack-&quot;&gt;Tech Stack :&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;polyglot , 80% code base in ruby and 20 % in java , node and php&lt;/li&gt;
  &lt;li&gt;mongo&lt;/li&gt;
  &lt;li&gt;redis&lt;/li&gt;
  &lt;li&gt;mysql (percona)&lt;/li&gt;
  &lt;li&gt;elasticsearch&lt;/li&gt;
  &lt;li&gt;torquebox and hornetq&lt;/li&gt;
  &lt;li&gt;chef&lt;/li&gt;
  &lt;li&gt;nagious&lt;/li&gt;
  &lt;li&gt;apache and haproxy&lt;/li&gt;
  &lt;li&gt;centos&lt;/li&gt;
  &lt;li&gt;openvz&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;a-big-rewrite&quot;&gt;A big rewrite&lt;/h2&gt;

&lt;p&gt;it all start with a big rewrite of the the existing platform , which
was a big fat jsp code base, repeated for 6 telcos , code was not unit tested and
not even close to mvc 1.&lt;/p&gt;

&lt;p&gt;initial version of new platform is developed in 2 months with a core domain
layer and application layer for vendor and access medium specific code.
the idea was to develop a core domain layer serve as api and other as application layer for device/vendor specific code, now we have around 20 similar micro services (some RESTish and some json over http),
each service is highly cohesive to device , vendor or a context.
apart from acting as anti corruption layers these micro services can also scale out independently.&lt;/p&gt;

&lt;h2 id=&quot;vertical-to-horizontal&quot;&gt;vertical to horizontal&lt;/h2&gt;

&lt;p&gt;for first few months we tried to scale up with torquebox in big box with jvm optimized for huge pages, but
for zero downtime deployment and HA, we moved to scale out with openvz
containers with apache/ mod_cluster(http) and haproxy(jms) as load balancers.&lt;/p&gt;

&lt;p&gt;we automated box setup to one click deployment using chef, and now we
have around 50 nodes handling all load.&lt;/p&gt;

&lt;h2 id=&quot;more-about-architecture&quot;&gt;More About Architecture&lt;/h2&gt;

&lt;p&gt;ussd checkin in our system requires response in less then
200ms , so system is modeled in events and base event checkin is
processed in less then 50ms, a checkin further emits another max 5 events for
various post processing actions , each event is processed by one or all sites.&lt;/p&gt;

&lt;p&gt;site is cluster of backend services with own db and cache deployed in different datacenter,
and can independently process basic checkin and generally optimized for specific access
mediums.&lt;/p&gt;

&lt;p&gt;sites are connected by a vpn tunnel over lease line.
site can play one or multiple role and we control it by giving it
capability and capability is controlled by chef.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;distributed architecture over wan is not a big deal ,but problems starts if it is not a shared nothing&lt;/strong&gt; , and multiplies with type and intensity of sharing.&lt;/p&gt;

&lt;p&gt;for some internal requirements we have to go with wan distribution and
hence to sync lots of data for mobile portability and
points/skipper/leaderboard calculations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;multi site replication&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;for muti site replication we are using application layer sync and
created a custom sync framework with fan out and repeat on failure with exponential backoff features,
data consistency is achieved by design by contract on sync endpoints.&lt;/p&gt;

&lt;p&gt;sync framework’s core is built with hornetq and netty connectors and it is working really great even with remote listeners.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;replicating single source of truth&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;points and leadernoard is single source of truth and it is calculated by one site,
we also need to access this data syncronpusly and it is not possible
over vpn because of encryption and multiple connections overhead.&lt;/p&gt;

&lt;p&gt;we tried various approaches to sync this, and finally followed cqrs type approach and now have different
request paths for read and writes. points are calculated in one site and synced to remote redis slave and read operation is always from redis slave.&lt;/p&gt;

&lt;p&gt;redis sync is almost realtime and very fast even for master to slave
of slave over 2 hop vpn links separated datacenters.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;tuning centos&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;system defaults not always works and cpu and memory sometimes are not
indicators of bottleneck. we tuned various kernel
parameters for network and connection related stuff.&lt;/p&gt;

&lt;p&gt;more on this in following post&lt;/p&gt;

&lt;h2 id=&quot;lesson-learned&quot;&gt;Lesson Learned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;dont trust your api users , they can stress your system in no time,  use timeouts and circuit breakers&lt;/li&gt;
  &lt;li&gt;redis sync is very fast and it sync in millis from master to slave of
slave even over 2 vpn link separated datacenters&lt;/li&gt;
  &lt;li&gt;visualize every things , logstaligia is great for apache logs visualization and quick indicator of load&lt;/li&gt;
  &lt;li&gt;adopt configuration management as soon as possible&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 27 Apr 2013 20:45:00 +0530</pubDate>
        <link>http://www.timusg.com//2013/04/27/hoppr-platform-in-last-10-months.html</link>
        <guid isPermaLink="true">http://www.timusg.com//2013/04/27/hoppr-platform-in-last-10-months.html</guid>
        
        
      </item>
    
  </channel>
</rss>
